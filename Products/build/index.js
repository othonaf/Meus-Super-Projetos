"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const uuid_1 = require("uuid");
const data_1 = require("./data");
const app = (0, express_1.default)();
app.use(express_1.default.json());
app.use((0, cors_1.default)());
/* EXERCISE 01
        Create a new zero API (or using a template) and develop a
        Get method test endpoint on Path “/test” that returns a
        generic message warning that the API is functional:
*/
app.get('/test', (req, res) => {
    res.status(201).send("This API  is functional");
});
/* EXERCISE 02
        Create a file called Data.Ts that exports a product array.
        Each product will be represented by an object
        with properties: ID (string), name (string) and price (number).
        Manually the array with at least 3 products:

        ---> On "data.ts"
*/
/* EXERCISE 03
        Develop an endpoint that creates a new product
        and returns to the updated product list. The product ID must be
        automatically generated by the API.
*/
app.post('/newProduct', (req, res) => {
    try {
        const { newProduct, newPrice } = req.body;
        const newObject = {
            id: (0, uuid_1.v4)(),
            name: newProduct,
            price: newPrice
        };
        const addNewObject = data_1.products.push(newObject);
        res.status(201).send(data_1.products);
    }
    catch (error) {
        throw new Error("Something was wrong...");
    }
});
/* EXERCISE 04
        Create an endpoint that returns all products.
*/
app.get('/AllProducts', (req, res) => {
    res.status(200).send(data_1.products);
});
/* EXERCISE 05
       Create an endpoint that edits the price of a
       particular product and returns to the updated product list.
*/
app.post('/editPrice', (req, res) => {
    try {
        const productPrice = req.body.name;
        const newPrice = req.body.price;
        const productToChange = data_1.products.find(element => element.name === productPrice);
        if (!productPrice || !newPrice) {
            throw new Error("Product name and the new price are required!");
        }
        productToChange.price = newPrice;
        res.status(201).send(data_1.products);
    }
    catch (error) {
        throw new Error("Data not found!");
    }
});
/* EXERCISE 06
       Build an endpoint that deletes a particular
       product and returns to the updated product list.
*/
app.delete('/deleteProduct', (req, res) => {
    try {
        const id = req.query.id;
        const itemToDelete = data_1.products.find(element => element.id === id);
        if (!id) {
            throw new Error("Please, type an Id!");
        }
        if (itemToDelete !== -1) {
            const updatedProducts = data_1.products.splice(itemToDelete, 1);
            res.status(201).send(updatedProducts);
        }
    }
    catch (error) {
        res.status(404).send("Data not found!");
    }
});
/* EXERCISE 07
       Refatore the Endpoint of Exercise 3 (Create Product) to implement
       validation flows of the data received (`name` and` price`)

- Error if one or none of them are received
- Error if `name` is different from` string`
- Error if `price` is different from` Number`
- Error if `price` is equal to or less than` 0`
- Error if something unexpected happens
*/
const Errors = {
    MISSING_DATA: { status: 404, message: "Name and Price are required." },
    DATA_INCONSISTENCE_NAME: { status: 404, message: "Name must not be a number." },
    DATA_INCONSISTENCE_PRICE: { status: 404, message: "Price must be a number." },
    PRICE_INCONSISTENCE: { status: 404, message: "Price must be a number above zero." },
    UNEXPECTED: { status: 500, message: "something unexpected happens." }
};
app.post('/exerciseRefatored', (req, res) => {
    try {
        const { newProduct, newPrice } = req.body;
        if (!newProduct || !newPrice) {
            throw new Error(Errors.MISSING_DATA.message);
        }
        if (typeof newProduct !== "string") {
            throw new Error(Errors.DATA_INCONSISTENCE_NAME.message);
        }
        if (typeof newPrice !== "number") {
            throw new Error(Errors.DATA_INCONSISTENCE_PRICE.message);
        }
        if (newPrice <= 0) {
            throw new Error(Errors.PRICE_INCONSISTENCE.message);
        }
        const newObject = {
            id: (0, uuid_1.v4)(),
            name: newProduct,
            price: newPrice
        };
        const addNewObject = data_1.products.push(newObject);
        res.status(201).send(data_1.products);
    }
    catch (error) {
        throw new Error("Something was wrong...");
    }
});
app.listen(3003, () => {
    console.log("Server is flying!");
});
